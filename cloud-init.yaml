#cloud-config
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
package_update: true
package_upgrade: true
package_reboot_if_required: false
write_files:
    - path: "/etc/environment"
      content: |-
         ANSIBLE_CMD="ansible-playbook -i environments/local -e docker_image_prefix=testing"
         TZ=Europe/London
    - path: "/etc/docker/daemon.json"
      content: |- 
       {"storage-driver": "overlay", 
       "userns-remap": "default", 
       "hosts": ["tcp://0.0.0.0:4243", 
       "unix:///var/run/docker.sock"]}
runcmd:
 - > 
   export TZ=Europe/London ;
   echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ;
   ln -snf /usr/share/zoneinfo/$TZ /etc/localtime ;
   echo $TZ > /etc/timezone
 - >
    apt-get update && apt-get -y upgrade &&
    apt-get -y install 
    build-essential
    software-properties-common apt-utils 
    lsb-release ca-certificates 
    curl wget gpg sudo 
    socat telnet inetutils-ping 
    unzip vim telnet less sudo git jq 
    python2 python2-dev libffi-dev libssl-dev
    python3-pip gcc g++ make 
    silversearcher-ag kafkacat
 - snap install google-cloud-cli --classic
 - >
    wget -O- https://apt.corretto.aws/corretto.key | apt-key add - ;
    add-apt-repository 'deb https://apt.corretto.aws stable main' ;
    apt-get update && apt-get -y install java-11-amazon-corretto-jdk ;
    pip3 install --upgrade pip setuptools six 
    'jinja2<3.1' ansible==2.8.18 pydocumentdb humanize requests
    #- >
    #ln -sf /usr/bin/python2 /usr/bin/python ;
    #curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py ;
    #python get-pip.py ;
    #python -m pip install setuptools six ansible==2.8.18 pydocumentdb humanize requests
 - >
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu bionic stable" > /etc/apt/sources.list.d/docker.list ;
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor > /usr/share/keyrings/docker-archive-keyring.gpg ;
    apt-get update && apt-get -y install docker-ce-cli docker-ce ;
    usermod -aG docker ubuntu
 - >
    curl -sL https://deb.nodesource.com/setup_16.x | bash ;
    apt-get install -y nodejs ;
    curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null ;
    echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main" | tee /etc/apt/sources.list.d/yarn.list ;
    apt-get update && sudo apt-get install yarn
 - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
 - >
   curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-$(dpkg --print-architecture) ;
   chmod +x ./kind ; mv ./kind /usr/local/bin/kind
- >
    FILE="git-delta_0.11.2_$(dpkg --print-architecture).deb" ;\
    wget "https://github.com/dandavison/delta/releases/download/0.11.2/$FILE" -O "/tmp/$FILE" ;\
    dpkg -i "/tmp/$FILE" ; rm "/tmp/$FILE"
- >
    VER="$(curl -L -s https://dl.k8s.io/release/stable.txt)" ;\
    ARCH="$(dpkg --print-architecture)" ;\
    URL="https://dl.k8s.io/release/$VER/bin/linux/$ARCH/kubectl" ;\
    wget $URL -O /usr/bin/kubectl && chmod +x /usr/bin/kubectl
- >
    VER="v4.5.4" ;\
    ARCH="$(dpkg --print-architecture)" ;\
    URL="https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F$VER/kustomize_${VER}_linux_${ARCH}.tar.gz" ;\
    curl -sL "$URL" | tar xzvf - -C /usr/bin
- > 
    ARCH="$(dpkg --print-architecture)" ;\
    VER=1.1.0 ;\
    URL="https://releases.hashicorp.com/terraform/$VER/terraform_${VER}_linux_${ARCH}.zip" ;\
    curl -sL $URL -o /tmp/terraform.zip ;\
    unzip /tmp/terraform.zip -d /usr/bin ;\
    rm /tmp/terraform.zip
- > 
    VER=v0.109.0 ;\
    ARCH="$(dpkg --print-architecture)" ;\
    curl -sL "https://github.com/weaveworks/eksctl/releases/download/${VER}/eksctl_Linux_${ARCH}.tar.gz" |\
    tar xzvf - -C /usr/bin
- >
    VER=4.11.0-0.okd-2022-08-20-022919 ;\
    ARCH=$(dpkg --print-architecture) ;\
    BASE=https://github.com/okd-project/okd/releases/download/ ;\
    URL1="$BASE/$VER/openshift-install-linux-$VER.tar.gz" ;\
    URL2="$BASE/$VER/openshift-client-linux-$VER.tar.gz" ;\
    curl -sL "$URL1" | tar xzvf - -C /usr/bin/ ;\
    curl -sL "$URL2" | tar xzvf - -C /usr/bin/
- > 
    mkdir /tmp/juju ; cd /tmp/juju ;\
    curl -sL https://launchpad.net/juju/2.9/2.9.0/+download/juju-2.9.0-linux-$(dpkg --print-architecture).tar.xz | tar xJvf - ;\
    install -o root -g root -m 0755 juju /usr/bin/juju ;\
    rm -Rvf /tmp/juju
- > 
    DO_VERSION=1.71.0 ;\
    DO_BASE=https://github.com/digitalocean/doctl/releases/download ;\
    ARCH=$(dpkg --print-architecture) ;\
    DO_URL="$DO_BASE/v$DO_VERSION/doctl-$DO_VERSION-linux-$ARCH.tar.gz" ;\
    curl -sL "$DO_URL" | tar xzvf - -C /usr/bin/
- >
    VER=0.11.3 ;\
    BASE=https://github.com/alexellis/k3sup/releases/download ;\
    ARCH=-$(dpkg --print-architecture) ;\
    if [[ $ARCH == "amd64" ]] ; then ARCH="" ; fi ;\
    URL="$BASE/$VER/k3sup${ARCH}" ;\
    curl -sL "$URL" >/usr/bin/k3sup ; chmod +x /usr/bin/k3sup
- > 
    VER="v1.4.1" ;\
    ARCH="$(dpkg --print-architecture)" ;\
    URL="https://github.com/knative/client/releases/download/knative-$VER/kn-linux-$ARCH" ;\
    curl -sL "$URL" | sudo tee /usr/bin/kn >/dev/null && sudo chmod +x /usr/bin/kn
- > 
    VER=1.2.0 ;\
    BASE=https://github.com/apache/openwhisk-cli/releases/download ;\
    ARCH=$(dpkg --print-architecture) ;\
    URL="$BASE/$VER/OpenWhisk_CLI-$VER-linux-$ARCH.tgz" ;\
    curl -sL "$URL" | tar xzvf - -C /usr/bin/
- > 
    VER=v0.2.2 ;\
    BASE=https://github.com/nuvolaris/nuvolaris/releases/download ;\
    ARCH=$(dpkg --print-architecture) ;\
    URL="$BASE/$VER/nuv-$VER-linux-$ARCH.tar.gz" ;\
    curl -sL "$URL" | tar xzvf - -C /usr/bin/
