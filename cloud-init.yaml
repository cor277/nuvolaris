#cloud-config
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
package_update: true
package_upgrade: true
package_reboot_if_required: false
write_files:
    - path: "/etc/environment"
      content: |-
         TZ=Europe/London
runcmd:
 - > 
   export TZ=Europe/London ;
   echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections ;
   ln -snf /usr/share/zoneinfo/$TZ /etc/localtime ;
   echo $TZ > /etc/timezone
 - apt-get update
 - apt-get -y upgrade
 - >
   apt-get -y install
   build-essential
   software-properties-common apt-utils
   lsb-release ca-certificates
   curl wget gpg sudo
   socat  inetutils-ping
   unzip vim telnet less sudo git jq
   libbz2-dev libncurses5-dev libreadline-dev
   libffi-dev libssl-dev libsqlite3-dev liblzma-dev
   python3-pip gcc g++ make kafkacat telnet inetutils-ping
 - snap install google-cloud-cli --classic
 - >
   wget -O- https://apt.corretto.aws/corretto.key | apt-key add - ;
   add-apt-repository 'deb https://apt.corretto.aws stable main' ;
   apt-get update && apt-get -y install java-11-amazon-corretto-jdk
 - >
   echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu bionic stable" > /etc/apt/sources.list.d/docker.list ;
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor > /usr/share/keyrings/docker-archive-keyring.gpg ;
   apt-get update && apt-get -y install docker-ce-cli docker-ce ;
   usermod -aG docker ubuntu
 - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
 - >
   curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-$(dpkg --print-architecture) ;
   chmod +x ./kind ; mv ./kind /usr/local/bin/kind
 - >
   PATH=/usr/bin:$PATH ;
   FILE="git-delta_0.11.2_$(dpkg --print-architecture).deb" ;
   wget "https://github.com/dandavison/delta/releases/download/0.11.2/$FILE" -O "/tmp/$FILE" ;
   dpkg -i "/tmp/$FILE" ; rm "/tmp/$FILE"
 - >
   PATH=/usr/bin:$PATH ;
   VER="v1.23.6" ;
   ARCH="$(dpkg --print-architecture)" ;
   URL="https://dl.k8s.io/release/$VER/bin/linux/$ARCH/kubectl" ;
   wget $URL -O /usr/bin/kubectl && chmod +x /usr/bin/kubectl
 - >
   PATH=/usr/bin:$PATH ;
   VER="v1.26.1" ;
   ARCH="$(dpkg --print-architecture)" ;
   URL="https://dl.k8s.io/release/$VER/bin/linux/$ARCH/kubeadm" ;
   wget $URL -O /usr/bin/kubeadm && chmod +x /usr/bin/kubeadm
 - >
   PATH=/usr/bin:$PATH ;
   VER="v1.26.1" ;
   ARCH="$(dpkg --print-architecture)" ;
   URL="https://dl.k8s.io/release/$VER/bin/linux/$ARCH/kubelet" ;
   wget $URL -O /usr/bin/kubelet && chmod +x /usr/bin/kubelet  
- >
    RELEASE_VERSION="v0.4.0" ;
    curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:${DOWNLOAD_DIR}:g" | sudo tee /etc/systemd/system/kubelet.service ;
    sudo mkdir -p /etc/systemd/system/kubelet.service.d ;
    curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:${DOWNLOAD_DIR}:g" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf ;
    sudo systemctl enable --now kubelet
- > 
    CRICTL_VERSION="v1.25.0" ;
    ARCH="$(dpkg --print-architecture)" ;
    curl -L "https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-${ARCH}.tar.gz" | sudo tar -C /usr/bin -xz
 - >
   PATH=/usr/bin:$PATH ;
   VER="v4.5.4" ;
   ARCH="$(dpkg --print-architecture)" ;
   URL="https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F$VER/kustomize_${VER}_linux_${ARCH}.tar.gz" ;
   curl -sL "$URL" | tar xzvf - -C /usr/bin
 - > 
   PATH=/usr/bin:$PATH ;
   ARCH="$(dpkg --print-architecture)" ;
   VER=1.1.0 ;
   URL="https://releases.hashicorp.com/terraform/$VER/terraform_${VER}_linux_${ARCH}.zip" ;
   curl -sL $URL -o /tmp/terraform.zip ;
   unzip /tmp/terraform.zip -d /usr/bin ;
   rm /tmp/terraform.zip
 - > 
   mkdir /tmp/awscli ;\
   curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-$(arch).zip" -o "/tmp/awscli/awscliv2.zip" ;\
   cd /tmp/awscli ; unzip awscliv2.zip ;\
   ./aws/install -b /usr/bin ;\
   rm -Rvf /tmp/awscli
 - >
   curl -sL https://aka.ms/InstallAzureCLIDeb | bash
 - > 
   PATH=/usr/bin:$PATH ;
   VER=v0.109.0 ;
   ARCH="$(dpkg --print-architecture)" ;
   curl -sL "https://github.com/weaveworks/eksctl/releases/download/${VER}/eksctl_Linux_${ARCH}.tar.gz" |\
   tar xzvf - -C /usr/bin
 - >
   PATH=/usr/bin:$PATH ;
   VER=4.11.0-0.okd-2022-08-20-022919 ;
   ARCH=$(dpkg --print-architecture) ;
   BASE=https://github.com/okd-project/okd/releases/download/ ;
   URL1="$BASE/$VER/openshift-install-linux-$VER.tar.gz" ;
   URL2="$BASE/$VER/openshift-client-linux-$VER.tar.gz" ;
   curl -sL "$URL1" | tar xzvf - -C /usr/bin/ ;
   curl -sL "$URL2" | tar xzvf - -C /usr/bin/
 - > 
    PATH=/usr/bin:$PATH ;
    mkdir /tmp/juju ; cd /tmp/juju ;
    curl -sL https://launchpad.net/juju/2.9/2.9.0/+download/juju-2.9.0-linux-$(dpkg --print-architecture).tar.xz | tar xJvf - ;
    install -o root -g root -m 0755 juju /usr/bin/juju ;
    rm -Rvf /tmp/juju
 - > 
    PATH=/usr/bin:$PATH ;
    DO_VERSION=1.71.0 ;
    DO_BASE=https://github.com/digitalocean/doctl/releases/download ;
    ARCH=$(dpkg --print-architecture) ;
    DO_URL="$DO_BASE/v$DO_VERSION/doctl-$DO_VERSION-linux-$ARCH.tar.gz" ;
    curl -sL "$DO_URL" | tar xzvf - -C /usr/bin/
 - >
    PATH=/usr/bin:$PATH ;
    VER=0.11.3 ;
    BASE=https://github.com/alexellis/k3sup/releases/download ;
    ARCH=-$(dpkg --print-architecture) ;
    if [[ $ARCH == "amd64" ]] ; then ARCH="" ; fi ;
    URL="$BASE/$VER/k3sup${ARCH}" ;
    curl -sL "$URL" >/usr/bin/k3sup ; chmod +x /usr/bin/k3sup
 - > 
    PATH=/usr/bin:$PATH ;
    VER="v1.4.1" ;
    ARCH="$(dpkg --print-architecture)" ;
    URL="https://github.com/knative/client/releases/download/knative-$VER/kn-linux-$ARCH" ;
    curl -sL "$URL" | sudo tee /usr/bin/kn >/dev/null && sudo chmod +x /usr/bin/kn
 - > 
    PATH=/usr/bin:$PATH ;
    VER=1.2.0 ;
    BASE=https://github.com/apache/openwhisk-cli/releases/download ;
    ARCH=$(dpkg --print-architecture) ;
    URL="$BASE/$VER/OpenWhisk_CLI-$VER-linux-$ARCH.tgz" ;
    curl -sL "$URL" | tar xzvf - -C /usr/bin/
 - >
    PATH=/usr/bin:$PATH ;
    VER=v0.2.2 ;
    BASE=https://github.com/nuvolaris/nuvolaris/releases/download ;
    ARCH=$(dpkg --print-architecture) ;
    URL="$BASE/$VER/nuv-$VER-linux-$ARCH.tar.gz" ;
    curl -sL "$URL" | tar xzvf - -C /usr/bin/
 - >
    PATH=/usr/bin:$PATH ;
    ARCH=$(dpkg --print-architecture) ;    
    BASE=https://awscli.amazonaws.com/awscli-exe-linux-$(ARCH).zip ;
    mkdir /tmp/awscli ; 
    curl -sL "$BASE" -o "/tmp/awscli/awscliv2.zip" ;    
    cd /tmp/awscli ; 
    unzip awscliv2.zip ;
    ./aws/install ;
    rm -Rvf /tmp/awscli  
 - >
    PATH=/usr/bin:$PATH ;
    VER=v0.109.0 ;
    mkdir /tmp/eksctl ; 
    curl -sL "https://github.com/weaveworks/eksctl/releases/download/${VER}/eksctl_Linux_${ARCH}.tar.gz" -o "/tmp/eksctl/eksctl_Linux_${ARCH}.tar.gz" ;
    cd /tmp/eksctl ; 
    tar xzvf - -C /usr/bin ;
    rm -Rvf /tmp/eksctl 
 - >
    PATH=/usr/bin:$PATH ;
    VER=v3.11.0-rc.2 ;
    ARCH=$(dpkg --print-architecture) ;        
    mkdir /tmp/helm ;     
    curl -sL "https://get.helm.sh/helm-${VER}-linux-${ARCH}.tar.gz" -o "/tmp/helm/helm-${VER}-linux-${ARCH}.tar.gz" ;
    cd /tmp/helm ; 
    tar -zxvf "helm-${VER}-linux-${ARCH}.tar.gz" ;
    mv "./linux-${ARCH}/helm" /usr/bin/helm ;
    rm -Rvf /tmp/helm  
 - >
    PATH=/usr/bin:$PATH ;
    ARCH=$(dpkg --print-architecture) ;
    MC_VER=RELEASE.2023-03-23T20-03-04Z ;
    rm -Rvf /tmp/minio-binaries ;
    mkdir /tmp/minio-binaries ;     
    curl -sL "https://dl.min.io/client/mc/release/linux-${ARCH}/mc.${MC_VER}" --create-dirs -o /tmp/minio-binaries/mc;
    chmod +x /tmp/minio-binaries/mc;
    mv /tmp/minio-binaries/mc /usr/bin/mc;
    rm -Rvf /tmp/minio-binaries    
 - |
    PATH=/usr/bin:$PATH 
    ARCH=$(dpkg --print-architecture)
    URL="https://github.com/carvel-dev/ytt/releases/download/v0.40.4/ytt-linux-$ARCH"
    curl -sL "$URL" >/usr/bin/ytt
    chmod +x /usr/bin/ytt
 - |
   PATH=/usr/bin:$PATH
   cd /home/ubuntu
   git clone https://github.com/nuvolaris/nuvolaris --recurse-submodules
   cp nuvolaris/gitconfig .gitconfig
   cp nuvolaris/init.sh /usr/sbin/init.sh
   chmod +x /usr/sbin/init.sh
   echo '/usr/sbin/init.sh' >>.bashrc
   echo 'source ~/nuvolaris/setup.source' >>.bashrc
   echo 'source ~/nuvolaris/aliases' >>.bashrc
   chown -Rvf ubuntu:ubuntu /home/ubuntu
   su -l ubuntu /usr/sbin/init.sh &
   su -l ubuntu bash -c 'source /home/ubuntu/nuvolaris/setup.source'
