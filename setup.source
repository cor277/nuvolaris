## NOTE! This script should be sourced, not executed. 
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
if test -z "$BASH"
then echo "Please, source me using bash." ; kill -INT $$
fi
if [[ "${BASH_SOURCE[0]}" == "${0}" ]] 
then echo "You must source this script with bash, not execute it." ; kill -INT $$
fi

# prompt
parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}
export PS1="[\[\e[32m\]\W:\[\e[91m\]\$(parse_git_branch)\[\e[00m\]]$ "

# versions
export NODENV_VERSION=16.13.0
export PYENV_VERSION=3.10.0
export GOENV_VERSION=1.18.3
export DOCKER_VERSION=19
export JAVA_VERSION=8

# env roots
export PYENV_ROOT="$HOME/.pyenv"
export NODENV_ROOT="$HOME/.nodenv"
export GOENV_ROOT="$HOME/.goenv"

# Preflight checks
die() {
    echo ERROR: "$@"
    kill -INT $$
}

ok() {
    echo OK: "$@"
}

if ! which gcc >/dev/null
then die "Please install development tools"
else ok gcc
fi

if ! which git >/dev/null
then die "Please install git"
else ok git
fi

if test -S /var/run/docker.sock
then 
    if ! which docker >/dev/null
    then die "Please install docker and assign access to this user"
    else 
        DOCKER_CUR_VERSION=$(docker version -f '{{.Server.Version}}'  | awk -F. '{print $1}')
        if [[ $DOCKER_CUR_VERSION -lt $DOCKER_VERSION ]]
        then die "required at least docker $DOCKER_VERSION, you have $DOCKER_CUR_VERSION"
        else ok docker
        fi
    fi
fi

if ! which java >/dev/null
then die "Please install java"
else 
    JAVA_CUR_VERSION=$(java -version 2>&1 | awk 'NR==1 { gsub("\"", "", $3) ; split($3,a,"."); print(a[1] == "1" ? a[2] : a[1]) }' )
    if [[ $JAVA_CUR_VERSION -lt $JAVA_VERSION ]]
    then die "required at least java $JAVA_VERSION, you have java $JAVA_CUR_VERSION"
    else ok java 
    fi
fi

if ! which kubectl >/dev/null
then die "Please install kubectl"
else ok kubectl
fi

if ! which wsk >/dev/null
then die "Please install wsk"
else ok wsk
fi

# Install
if ! test -d $GOENV_ROOT
then git clone https://github.com/syndbg/goenv.git $GOENV_ROOT
else ok goenv
fi

if ! test -e $NODENV_ROOT
then git clone https://github.com/nodenv/nodenv.git $NODENV_ROOT
     mkdir "$NODENV_ROOT/plugins"
     git clone https://github.com/nodenv/node-build.git "$NODENV_ROOT"/plugins/node-build
else ok nodenv
fi

if ! test -e $PYENV_ROOT
then git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT
else ok pyenv
fi

export GOBIN="$HOME/.local/bin"
export PATH="$GOBIN:$GOENV_ROOT/bin:$NODENV_ROOT/bin:$PYENV_ROOT/bin:$PATH"

eval "$(nodenv init -)"
nodenv install $NODENV_VERSION -s

eval "$(pyenv init --path)"
eval "$(pyenv init -)"
pyenv install $PYENV_VERSION -s

eval "$(goenv init -)"
goenv install $GOENV_VERSION -s

# install task
if ! which task >/dev/null
then go install github.com/go-task/task/v3/cmd/task@latest
else ok task
fi

# install yq
if ! which yq >/dev/null
then go install github.com/mikefarah/yq/v4@latest
else ok yq
fi

# install ansible
if ! which ansible >/dev/null
then pip install ansible
else ok ansible
fi

# install httpie
if ! which http >/dev/null
then pip install httpie
else ok httpie
fi

# install addlicense
if ! which license-eye >/dev/null
then go install github.com/apache/skywalking-eyes/cmd/license-eye@latest
else ok license-eye
fi

# install poetry
if ! which poetry >/dev/null
then curl -sSL https://install.python-poetry.org | python3 -
else ok poetry
fi

# install jest
if ! nodenv which jest >/dev/null
then npm install -g jest
else ok jest
fi
export PATH="$(nodenv prefix)/bin:$PATH"

# install zx
if ! which zx >/dev/null
then npm install -g zx
else ok zx
fi

# install coursier - commented out as not required for now
#if ! which cs >/dev/null
#then curl -sfLo $HOME/.local/bin/cs https://git.io/coursier-cli-"$(uname | tr LD ld)"
#     chmod +x $HOME/.local/bin/cs  
#else ok coursier
#fi
#eval "$(cs setup --env 2>/dev/null)"

# install func
if ! which func >/dev/null
then 
    pushd /tmp 
    git clone https://github.com/knative-sandbox/kn-plugin-func.git
    cd kn-plugin-func
    make
    mv func $GOBIN/func
    popd
    rm -Rvf /tmp/kn-plugin-func
else ok func
fi

# install hcloud
if ! which hcloud >/dev/null
then go install github.com/hetznercloud/cli/cmd/hcloud@latest
else ok hcloud
fi

# install linode-cli
if ! which linode-cli >/dev/null
then pip install linode-cli
else ok linode-cli
fi
# env
if test -e .env
then export $(xargs <.env)
     ok .env
fi

# install go tools for VSCode
for REF in \
 github.com/cweill/gotests/gotests \
 github.com/fatih/gomodifytags \
 github.com/josharian/impl \
 github.com/haya14busa/goplay/cmd/goplay \
 honnef.co/go/tools/cmd/staticcheck \
 golang.org/x/tools/gopls 
do CMD="$(basename $REF)"
   if which $CMD >/dev/null
   then ok $CMD
   else go install $REF@latest
   fi
done

# replace
if ! which replace >/dev/null
then npm install -g replace
else ok replace
fi

# extra
if test -e ~/.localrc
then source ~/.localrc
fi

# setup
if test -e Taskfile.yml
then task setup
fi
